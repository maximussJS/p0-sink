// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: proto/server.proto

package serverpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Direction int32

const (
	Direction_FORWARD  Direction = 0
	Direction_BACKWARD Direction = 1
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "FORWARD",
		1: "BACKWARD",
	}
	Direction_value = map[string]int32{
		"FORWARD":  0,
		"BACKWARD": 1,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_server_proto_enumTypes[0].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_proto_server_proto_enumTypes[0]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{0}
}

type ReorgAction int32

const (
	ReorgAction_ROLLBACK_AND_RESEND ReorgAction = 0
	ReorgAction_RESEND              ReorgAction = 1
	ReorgAction_IGNORE              ReorgAction = 2
)

// Enum value maps for ReorgAction.
var (
	ReorgAction_name = map[int32]string{
		0: "ROLLBACK_AND_RESEND",
		1: "RESEND",
		2: "IGNORE",
	}
	ReorgAction_value = map[string]int32{
		"ROLLBACK_AND_RESEND": 0,
		"RESEND":              1,
		"IGNORE":              2,
	}
)

func (x ReorgAction) Enum() *ReorgAction {
	p := new(ReorgAction)
	*p = x
	return p
}

func (x ReorgAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReorgAction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_server_proto_enumTypes[1].Descriptor()
}

func (ReorgAction) Type() protoreflect.EnumType {
	return &file_proto_server_proto_enumTypes[1]
}

func (x ReorgAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReorgAction.Descriptor instead.
func (ReorgAction) EnumDescriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{1}
}

type BlocksRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Dataset string                 `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Types that are valid to be assigned to From:
	//
	//	*BlocksRequest_FromBlockNumber
	//	*BlocksRequest_FromCursor
	From          isBlocksRequest_From `protobuf_oneof:"from"`
	ToBlockNumber int64                `protobuf:"varint,4,opt,name=toBlockNumber,proto3" json:"toBlockNumber,omitempty"`
	Lag           *int32               `protobuf:"varint,5,opt,name=lag,proto3,oneof" json:"lag,omitempty"`
	OnReorg       *ReorgAction         `protobuf:"varint,6,opt,name=onReorg,proto3,enum=dtq.bs.server.ReorgAction,oneof" json:"onReorg,omitempty"`
	Compression   string               `protobuf:"bytes,7,opt,name=compression,proto3" json:"compression,omitempty"`
	Format        string               `protobuf:"bytes,8,opt,name=format,proto3" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlocksRequest) Reset() {
	*x = BlocksRequest{}
	mi := &file_proto_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocksRequest) ProtoMessage() {}

func (x *BlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocksRequest.ProtoReflect.Descriptor instead.
func (*BlocksRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{0}
}

func (x *BlocksRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *BlocksRequest) GetFrom() isBlocksRequest_From {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *BlocksRequest) GetFromBlockNumber() int64 {
	if x != nil {
		if x, ok := x.From.(*BlocksRequest_FromBlockNumber); ok {
			return x.FromBlockNumber
		}
	}
	return 0
}

func (x *BlocksRequest) GetFromCursor() string {
	if x != nil {
		if x, ok := x.From.(*BlocksRequest_FromCursor); ok {
			return x.FromCursor
		}
	}
	return ""
}

func (x *BlocksRequest) GetToBlockNumber() int64 {
	if x != nil {
		return x.ToBlockNumber
	}
	return 0
}

func (x *BlocksRequest) GetLag() int32 {
	if x != nil && x.Lag != nil {
		return *x.Lag
	}
	return 0
}

func (x *BlocksRequest) GetOnReorg() ReorgAction {
	if x != nil && x.OnReorg != nil {
		return *x.OnReorg
	}
	return ReorgAction_ROLLBACK_AND_RESEND
}

func (x *BlocksRequest) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *BlocksRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type isBlocksRequest_From interface {
	isBlocksRequest_From()
}

type BlocksRequest_FromBlockNumber struct {
	FromBlockNumber int64 `protobuf:"varint,2,opt,name=fromBlockNumber,proto3,oneof"`
}

type BlocksRequest_FromCursor struct {
	FromCursor string `protobuf:"bytes,3,opt,name=fromCursor,proto3,oneof"`
}

func (*BlocksRequest_FromBlockNumber) isBlocksRequest_From() {}

func (*BlocksRequest_FromCursor) isBlocksRequest_From() {}

type SingleBlockRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Dataset string                 `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Types that are valid to be assigned to Block:
	//
	//	*SingleBlockRequest_BlockNumber
	//	*SingleBlockRequest_BlockHash
	Block         isSingleBlockRequest_Block `protobuf_oneof:"block"`
	Compression   string                     `protobuf:"bytes,4,opt,name=compression,proto3" json:"compression,omitempty"`
	Format        string                     `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SingleBlockRequest) Reset() {
	*x = SingleBlockRequest{}
	mi := &file_proto_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleBlockRequest) ProtoMessage() {}

func (x *SingleBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleBlockRequest.ProtoReflect.Descriptor instead.
func (*SingleBlockRequest) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{1}
}

func (x *SingleBlockRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *SingleBlockRequest) GetBlock() isSingleBlockRequest_Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *SingleBlockRequest) GetBlockNumber() uint64 {
	if x != nil {
		if x, ok := x.Block.(*SingleBlockRequest_BlockNumber); ok {
			return x.BlockNumber
		}
	}
	return 0
}

func (x *SingleBlockRequest) GetBlockHash() string {
	if x != nil {
		if x, ok := x.Block.(*SingleBlockRequest_BlockHash); ok {
			return x.BlockHash
		}
	}
	return ""
}

func (x *SingleBlockRequest) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *SingleBlockRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type isSingleBlockRequest_Block interface {
	isSingleBlockRequest_Block()
}

type SingleBlockRequest_BlockNumber struct {
	BlockNumber uint64 `protobuf:"varint,2,opt,name=blockNumber,proto3,oneof"`
}

type SingleBlockRequest_BlockHash struct {
	BlockHash string `protobuf:"bytes,3,opt,name=blockHash,proto3,oneof"`
}

func (*SingleBlockRequest_BlockNumber) isSingleBlockRequest_Block() {}

func (*SingleBlockRequest_BlockHash) isSingleBlockRequest_Block() {}

type BlockWrapper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockNumber   uint64                 `protobuf:"varint,1,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	Direction     Direction              `protobuf:"varint,2,opt,name=direction,proto3,enum=dtq.bs.server.Direction" json:"direction,omitempty"`
	IsHead        bool                   `protobuf:"varint,3,opt,name=isHead,proto3" json:"isHead,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Cursor        string                 `protobuf:"bytes,5,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Url           string                 `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockWrapper) Reset() {
	*x = BlockWrapper{}
	mi := &file_proto_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockWrapper) ProtoMessage() {}

func (x *BlockWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockWrapper.ProtoReflect.Descriptor instead.
func (*BlockWrapper) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{2}
}

func (x *BlockWrapper) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BlockWrapper) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_FORWARD
}

func (x *BlockWrapper) GetIsHead() bool {
	if x != nil {
		return x.IsHead
	}
	return false
}

func (x *BlockWrapper) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockWrapper) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *BlockWrapper) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type BlockHead struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Number        uint64                 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	ParentHash    string                 `protobuf:"bytes,3,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	Timestamp     uint64                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockHead) Reset() {
	*x = BlockHead{}
	mi := &file_proto_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHead) ProtoMessage() {}

func (x *BlockHead) ProtoReflect() protoreflect.Message {
	mi := &file_proto_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHead.ProtoReflect.Descriptor instead.
func (*BlockHead) Descriptor() ([]byte, []int) {
	return file_proto_server_proto_rawDescGZIP(), []int{3}
}

func (x *BlockHead) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BlockHead) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BlockHead) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *BlockHead) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_proto_server_proto protoreflect.FileDescriptor

var file_proto_server_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x74, 0x71, 0x2e, 0x62, 0x73, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc5, 0x02, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x0f,
	0x66, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x15, 0x0a, 0x03, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x03, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x6f, 0x6e, 0x52, 0x65, 0x6f,
	0x72, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x74, 0x71, 0x2e, 0x62,
	0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6f, 0x72, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x07, 0x6f, 0x6e, 0x52, 0x65, 0x6f, 0x72, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x61, 0x67, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6f, 0x6e, 0x52, 0x65, 0x6f, 0x72, 0x67, 0x22, 0xb5, 0x01, 0x0a, 0x12, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0xba, 0x01, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x74, 0x71, 0x2e, 0x62, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x48, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48,
	0x65, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x75, 0x0a,
	0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2a, 0x26, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52, 0x44, 0x10, 0x01, 0x2a, 0x3e, 0x0a, 0x0b,
	0x52, 0x65, 0x6f, 0x72, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x32, 0xa3, 0x01, 0x0a,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x45, 0x0a, 0x06,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1c, 0x2e, 0x64, 0x74, 0x71, 0x2e, 0x62, 0x73, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x74, 0x71, 0x2e, 0x62, 0x73, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x21, 0x2e, 0x64, 0x74, 0x71, 0x2e, 0x62, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x74, 0x71, 0x2e, 0x62, 0x73, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x32, 0x50, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x64, 0x74, 0x71,
	0x2e, 0x62, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x42, 0x18, 0x5a, 0x16, 0x70, 0x30, 0x2d, 0x73, 0x69, 0x6e, 0x6b, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_server_proto_rawDescOnce sync.Once
	file_proto_server_proto_rawDescData []byte
)

func file_proto_server_proto_rawDescGZIP() []byte {
	file_proto_server_proto_rawDescOnce.Do(func() {
		file_proto_server_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_server_proto_rawDesc), len(file_proto_server_proto_rawDesc)))
	})
	return file_proto_server_proto_rawDescData
}

var file_proto_server_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_server_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_server_proto_goTypes = []any{
	(Direction)(0),             // 0: dtq.bs.server.Direction
	(ReorgAction)(0),           // 1: dtq.bs.server.ReorgAction
	(*BlocksRequest)(nil),      // 2: dtq.bs.server.BlocksRequest
	(*SingleBlockRequest)(nil), // 3: dtq.bs.server.SingleBlockRequest
	(*BlockWrapper)(nil),       // 4: dtq.bs.server.BlockWrapper
	(*BlockHead)(nil),          // 5: dtq.bs.server.BlockHead
	(*emptypb.Empty)(nil),      // 6: google.protobuf.Empty
}
var file_proto_server_proto_depIdxs = []int32{
	1, // 0: dtq.bs.server.BlocksRequest.onReorg:type_name -> dtq.bs.server.ReorgAction
	0, // 1: dtq.bs.server.BlockWrapper.direction:type_name -> dtq.bs.server.Direction
	2, // 2: dtq.bs.server.BlockStream.Blocks:input_type -> dtq.bs.server.BlocksRequest
	3, // 3: dtq.bs.server.BlockStream.SingleBlock:input_type -> dtq.bs.server.SingleBlockRequest
	6, // 4: dtq.bs.server.BlocksService.CurrentHead:input_type -> google.protobuf.Empty
	4, // 5: dtq.bs.server.BlockStream.Blocks:output_type -> dtq.bs.server.BlockWrapper
	4, // 6: dtq.bs.server.BlockStream.SingleBlock:output_type -> dtq.bs.server.BlockWrapper
	5, // 7: dtq.bs.server.BlocksService.CurrentHead:output_type -> dtq.bs.server.BlockHead
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_server_proto_init() }
func file_proto_server_proto_init() {
	if File_proto_server_proto != nil {
		return
	}
	file_proto_server_proto_msgTypes[0].OneofWrappers = []any{
		(*BlocksRequest_FromBlockNumber)(nil),
		(*BlocksRequest_FromCursor)(nil),
	}
	file_proto_server_proto_msgTypes[1].OneofWrappers = []any{
		(*SingleBlockRequest_BlockNumber)(nil),
		(*SingleBlockRequest_BlockHash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_server_proto_rawDesc), len(file_proto_server_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_server_proto_goTypes,
		DependencyIndexes: file_proto_server_proto_depIdxs,
		EnumInfos:         file_proto_server_proto_enumTypes,
		MessageInfos:      file_proto_server_proto_msgTypes,
	}.Build()
	File_proto_server_proto = out.File
	file_proto_server_proto_goTypes = nil
	file_proto_server_proto_depIdxs = nil
}
